Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> statement NEWLINE programme
Rule 3     statement -> MOV varExpression , expression
Rule 4     statement -> PUSH expression
Rule 5     statement -> POP expression
Rule 6     varExpression -> IDENTIFIER
Rule 7     expression -> NUMBER
Rule 8     expression -> IDENTIFIER

Terminals, with rules where they appear

,                    : 3
IDENTIFIER           : 6 8
MOV                  : 3
NEWLINE              : 2
NUMBER               : 7
POP                  : 5
PUSH                 : 4
error                : 

Nonterminals, with rules where they appear

expression           : 3 4 5
programme            : 2 0
statement            : 1 2
varExpression        : 3

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . statement NEWLINE programme
    (3) statement -> . MOV varExpression , expression
    (4) statement -> . PUSH expression
    (5) statement -> . POP expression

    MOV             shift and go to state 3
    PUSH            shift and go to state 4
    POP             shift and go to state 5

    programme                      shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (2) programme -> statement . NEWLINE programme

    $end            reduce using rule 1 (programme -> statement .)
    NEWLINE         shift and go to state 6


state 3

    (3) statement -> MOV . varExpression , expression
    (6) varExpression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 8

    varExpression                  shift and go to state 7

state 4

    (4) statement -> PUSH . expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 9

state 5

    (5) statement -> POP . expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 12

state 6

    (2) programme -> statement NEWLINE . programme
    (1) programme -> . statement
    (2) programme -> . statement NEWLINE programme
    (3) statement -> . MOV varExpression , expression
    (4) statement -> . PUSH expression
    (5) statement -> . POP expression

    MOV             shift and go to state 3
    PUSH            shift and go to state 4
    POP             shift and go to state 5

    statement                      shift and go to state 2
    programme                      shift and go to state 13

state 7

    (3) statement -> MOV varExpression . , expression

    ,               shift and go to state 14


state 8

    (6) varExpression -> IDENTIFIER .

    ,               reduce using rule 6 (varExpression -> IDENTIFIER .)


state 9

    (4) statement -> PUSH expression .

    NEWLINE         reduce using rule 4 (statement -> PUSH expression .)
    $end            reduce using rule 4 (statement -> PUSH expression .)


state 10

    (7) expression -> NUMBER .

    NEWLINE         reduce using rule 7 (expression -> NUMBER .)
    $end            reduce using rule 7 (expression -> NUMBER .)


state 11

    (8) expression -> IDENTIFIER .

    NEWLINE         reduce using rule 8 (expression -> IDENTIFIER .)
    $end            reduce using rule 8 (expression -> IDENTIFIER .)


state 12

    (5) statement -> POP expression .

    NEWLINE         reduce using rule 5 (statement -> POP expression .)
    $end            reduce using rule 5 (statement -> POP expression .)


state 13

    (2) programme -> statement NEWLINE programme .

    $end            reduce using rule 2 (programme -> statement NEWLINE programme .)


state 14

    (3) statement -> MOV varExpression , . expression
    (7) expression -> . NUMBER
    (8) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 11

    expression                     shift and go to state 15

state 15

    (3) statement -> MOV varExpression , expression .

    NEWLINE         reduce using rule 3 (statement -> MOV varExpression , expression .)
    $end            reduce using rule 3 (statement -> MOV varExpression , expression .)

