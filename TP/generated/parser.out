Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement
Rule 2     programme -> structure
Rule 3     programme -> statement NEWLINE programme
Rule 4     statement -> MOV varExpression , expression
Rule 5     statement -> ADD_OP varExpression , expression
Rule 6     statement -> INC_OP varExpression
Rule 7     statement -> PUSH expression
Rule 8     statement -> POP expression
Rule 9     varExpression -> IDENTIFIER
Rule 10    expression -> NUMBER
Rule 11    expression -> IDENTIFIER
Rule 12    structure -> JUMP_OP : NEWLINE programme
Rule 13    statement -> CMP expression , expression NEWLINE COND_OP JUMP_OP

Terminals, with rules where they appear

,                    : 4 5 13
:                    : 12
ADD_OP               : 5
CMP                  : 13
COND_OP              : 13
IDENTIFIER           : 9 11
INC_OP               : 6
JUMP_OP              : 12 13
MOV                  : 4
NEWLINE              : 3 12 13
NUMBER               : 10
POP                  : 8
PUSH                 : 7
error                : 

Nonterminals, with rules where they appear

expression           : 4 5 7 8 13 13
programme            : 3 12 0
statement            : 1 3
structure            : 2
varExpression        : 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement
    (2) programme -> . structure
    (3) programme -> . statement NEWLINE programme
    (4) statement -> . MOV varExpression , expression
    (5) statement -> . ADD_OP varExpression , expression
    (6) statement -> . INC_OP varExpression
    (7) statement -> . PUSH expression
    (8) statement -> . POP expression
    (13) statement -> . CMP expression , expression NEWLINE COND_OP JUMP_OP
    (12) structure -> . JUMP_OP : NEWLINE programme

    MOV             shift and go to state 4
    ADD_OP          shift and go to state 5
    INC_OP          shift and go to state 6
    PUSH            shift and go to state 7
    POP             shift and go to state 8
    CMP             shift and go to state 9
    JUMP_OP         shift and go to state 10

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    structure                      shift and go to state 3

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement .
    (3) programme -> statement . NEWLINE programme

    $end            reduce using rule 1 (programme -> statement .)
    NEWLINE         shift and go to state 11


state 3

    (2) programme -> structure .

    $end            reduce using rule 2 (programme -> structure .)


state 4

    (4) statement -> MOV . varExpression , expression
    (9) varExpression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    varExpression                  shift and go to state 12

state 5

    (5) statement -> ADD_OP . varExpression , expression
    (9) varExpression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    varExpression                  shift and go to state 14

state 6

    (6) statement -> INC_OP . varExpression
    (9) varExpression -> . IDENTIFIER

    IDENTIFIER      shift and go to state 13

    varExpression                  shift and go to state 15

state 7

    (7) statement -> PUSH . expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 16

state 8

    (8) statement -> POP . expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 19

state 9

    (13) statement -> CMP . expression , expression NEWLINE COND_OP JUMP_OP
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 20

state 10

    (12) structure -> JUMP_OP . : NEWLINE programme

    :               shift and go to state 21


state 11

    (3) programme -> statement NEWLINE . programme
    (1) programme -> . statement
    (2) programme -> . structure
    (3) programme -> . statement NEWLINE programme
    (4) statement -> . MOV varExpression , expression
    (5) statement -> . ADD_OP varExpression , expression
    (6) statement -> . INC_OP varExpression
    (7) statement -> . PUSH expression
    (8) statement -> . POP expression
    (13) statement -> . CMP expression , expression NEWLINE COND_OP JUMP_OP
    (12) structure -> . JUMP_OP : NEWLINE programme

    MOV             shift and go to state 4
    ADD_OP          shift and go to state 5
    INC_OP          shift and go to state 6
    PUSH            shift and go to state 7
    POP             shift and go to state 8
    CMP             shift and go to state 9
    JUMP_OP         shift and go to state 10

    statement                      shift and go to state 2
    programme                      shift and go to state 22
    structure                      shift and go to state 3

state 12

    (4) statement -> MOV varExpression . , expression

    ,               shift and go to state 23


state 13

    (9) varExpression -> IDENTIFIER .

    ,               reduce using rule 9 (varExpression -> IDENTIFIER .)
    NEWLINE         reduce using rule 9 (varExpression -> IDENTIFIER .)
    $end            reduce using rule 9 (varExpression -> IDENTIFIER .)


state 14

    (5) statement -> ADD_OP varExpression . , expression

    ,               shift and go to state 24


state 15

    (6) statement -> INC_OP varExpression .

    NEWLINE         reduce using rule 6 (statement -> INC_OP varExpression .)
    $end            reduce using rule 6 (statement -> INC_OP varExpression .)


state 16

    (7) statement -> PUSH expression .

    NEWLINE         reduce using rule 7 (statement -> PUSH expression .)
    $end            reduce using rule 7 (statement -> PUSH expression .)


state 17

    (10) expression -> NUMBER .

    NEWLINE         reduce using rule 10 (expression -> NUMBER .)
    $end            reduce using rule 10 (expression -> NUMBER .)
    ,               reduce using rule 10 (expression -> NUMBER .)


state 18

    (11) expression -> IDENTIFIER .

    NEWLINE         reduce using rule 11 (expression -> IDENTIFIER .)
    $end            reduce using rule 11 (expression -> IDENTIFIER .)
    ,               reduce using rule 11 (expression -> IDENTIFIER .)


state 19

    (8) statement -> POP expression .

    NEWLINE         reduce using rule 8 (statement -> POP expression .)
    $end            reduce using rule 8 (statement -> POP expression .)


state 20

    (13) statement -> CMP expression . , expression NEWLINE COND_OP JUMP_OP

    ,               shift and go to state 25


state 21

    (12) structure -> JUMP_OP : . NEWLINE programme

    NEWLINE         shift and go to state 26


state 22

    (3) programme -> statement NEWLINE programme .

    $end            reduce using rule 3 (programme -> statement NEWLINE programme .)


state 23

    (4) statement -> MOV varExpression , . expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 27

state 24

    (5) statement -> ADD_OP varExpression , . expression
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 28

state 25

    (13) statement -> CMP expression , . expression NEWLINE COND_OP JUMP_OP
    (10) expression -> . NUMBER
    (11) expression -> . IDENTIFIER

    NUMBER          shift and go to state 17
    IDENTIFIER      shift and go to state 18

    expression                     shift and go to state 29

state 26

    (12) structure -> JUMP_OP : NEWLINE . programme
    (1) programme -> . statement
    (2) programme -> . structure
    (3) programme -> . statement NEWLINE programme
    (4) statement -> . MOV varExpression , expression
    (5) statement -> . ADD_OP varExpression , expression
    (6) statement -> . INC_OP varExpression
    (7) statement -> . PUSH expression
    (8) statement -> . POP expression
    (13) statement -> . CMP expression , expression NEWLINE COND_OP JUMP_OP
    (12) structure -> . JUMP_OP : NEWLINE programme

    MOV             shift and go to state 4
    ADD_OP          shift and go to state 5
    INC_OP          shift and go to state 6
    PUSH            shift and go to state 7
    POP             shift and go to state 8
    CMP             shift and go to state 9
    JUMP_OP         shift and go to state 10

    programme                      shift and go to state 30
    statement                      shift and go to state 2
    structure                      shift and go to state 3

state 27

    (4) statement -> MOV varExpression , expression .

    NEWLINE         reduce using rule 4 (statement -> MOV varExpression , expression .)
    $end            reduce using rule 4 (statement -> MOV varExpression , expression .)


state 28

    (5) statement -> ADD_OP varExpression , expression .

    NEWLINE         reduce using rule 5 (statement -> ADD_OP varExpression , expression .)
    $end            reduce using rule 5 (statement -> ADD_OP varExpression , expression .)


state 29

    (13) statement -> CMP expression , expression . NEWLINE COND_OP JUMP_OP

    NEWLINE         shift and go to state 31


state 30

    (12) structure -> JUMP_OP : NEWLINE programme .

    $end            reduce using rule 12 (structure -> JUMP_OP : NEWLINE programme .)


state 31

    (13) statement -> CMP expression , expression NEWLINE . COND_OP JUMP_OP

    COND_OP         shift and go to state 32


state 32

    (13) statement -> CMP expression , expression NEWLINE COND_OP . JUMP_OP

    JUMP_OP         shift and go to state 33


state 33

    (13) statement -> CMP expression , expression NEWLINE COND_OP JUMP_OP .

    NEWLINE         reduce using rule 13 (statement -> CMP expression , expression NEWLINE COND_OP JUMP_OP .)
    $end            reduce using rule 13 (statement -> CMP expression , expression NEWLINE COND_OP JUMP_OP .)

